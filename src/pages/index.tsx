import { type NextPage } from "next";
import Head from "next/head";
import { type SetStateAction, useEffect, useState, type Dispatch } from "react";
import ErrorBoundary from "~/components/ErrorBoundary";
import useDebounce from "~/utils/hooks/useDebounce";
import transpileCode from "~/utils/transpileCode";

const ErrorFallback = () => {
  return (
    <div className="h-full w-full bg-red-100">Something went wrong...</div>
  );
};

type PreviewWindowProps = {
  userText: string;
  setIsTyping: Dispatch<SetStateAction<boolean>>;
};

const PreviewWindow: React.FunctionComponent<PreviewWindowProps> = ({
  userText,
  setIsTyping,
}) => {
  const [codeResult, setCodeResult] = useState("");

  useEffect(() => {
    if (userText) {
      setIsTyping(true);

      // eslint-disable-next-line @typescript-eslint/no-empty-function
      setTimeout(() => {}, 3 * 1000);

      const { iframeCode, sourceCode } = transpileCode(userText);

      const source = /* html */ `
      <html>
      <head>
        <link rel="stylesheet" href="/iframe.css">
      </head>
      <body>
        <div id="app"></div>
        <script type="module">${sourceCode}</script>
      </body>
      </html>
    `;

      setCodeResult(source);

      setIsTyping(false);
    } else {
      setIsTyping(false);
    }
  }, [userText, setIsTyping]);

  return (
    <div className="relative h-1/2 w-full">
      <iframe srcDoc={codeResult} className="h-full w-full bg-white"></iframe>
    </div>
  );
};

const Home: NextPage = () => {
  const [userText, setUserText] = useState("");
  const [isTyping, setIsTyping] = useState(false);
  const [error, setError] = useState("");

  const debouncedUserText = useDebounce(userText, 500);

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="grid h-screen grid-cols-2 bg-cyan-800 p-16">
        <div className="h-full bg-cyan-800 pr-2">
          <textarea
            spellCheck="false"
            className="h-full w-full resize-none"
            onChange={(event) => setUserText(event.target.value)}
          ></textarea>
        </div>
        <div className="flex h-full flex-col gap-4 bg-cyan-800 pl-2">
          <ErrorBoundary fallback={ErrorFallback}>
            <PreviewWindow
              userText={debouncedUserText}
              setIsTyping={setIsTyping}
            ></PreviewWindow>
          </ErrorBoundary>

          <div className="h-1/2 w-full bg-white"></div>
        </div>
      </main>
    </>
  );
};

export default Home;
